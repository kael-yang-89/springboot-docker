spring.datasource.primary.url=jdbc:oracle:thin:@192.168.159.11:1521:orcl
spring.datasource.primary.username=orcl_user
 #连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。
 # 详细看这里：https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter
spring.datasource.primary.password=hadoop123
spring.datasource.primary.driverClassName=oracle.jdbc.driver.OracleDriver
spring.datasource.primary.type=com.alibaba.druid.pool.DruidDataSource
 ##最大连接池数量 默认8
spring.datasource.primary.maxActive = 20
 #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 默认0
spring.datasource.primary.initialSize = 1
 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
 # 缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.primary.maxWait = 60000
 #最小连接池数量
spring.datasource.primary.minIdle = 1
 #有两个含义：
 #1) Destroy线程会检测连接的间隔时间
 # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
spring.datasource.primary.timeBetweenEvictionRunsMillis = 60000

spring.datasource.primary.minEvictableIdleTimeMillis = 300000
 #用来检测连接是否有效的sql，要求是一个查询语句。
 # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.primary.validationQuery = SELECT 1 FROM DUAL
 #建议配置为true，不影响性能，并且保证安全性。  默认false
 # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.primary.testWhileIdle = true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 默认true
spring.datasource.primary.testOnBorrow = false
 #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 默认false
spring.datasource.primary.testOnReturn = false
 #是否缓存preparedStatement，也就是PSCache。
 # PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭  默认false
spring.datasource.primary.poolPreparedStatements = true
 # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
 # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100  默认-1
spring.datasource.primary.maxOpenPreparedStatements = 100
